repository: https://github.com/joydip-git/siemens-angular-22ndjuly2024

s/w requirements:
Node JS latest LTS version (20.15.1)
Visual Studio Code (System Installer - X64 version)

Pre-requisites:
HTML and CSS
JavaScript and TypeScript
JS runtime: Node JS and Browser

JavaScript:
loosely typed programming language
it is object-based programming language
compiled and executed by a JS engine

runtime environments:
a. Browser
b. Node JS, Rhino, Dino etc.

a. Browser: JS code written inside HTML file or separately in a JS file, but linked with HTML file using <script> tag, will be compiled and executed by JS engine, part of the browser.
chrome: V8
edge: V8 (chromekit browser)
opera: V8
safari: JS core
mozilla firefox: Spidermonkey

b. non-browser (Node JS, Rhino, Dino etc.):
directly a JS file containing JS code will be supplied to those runtimes and it is compiled and executed by the JS engine part of those runtimes
Node JS: has a JS engine, which is slightly modified version of V8 engine

Application development server: during the development of the application, the server which is used to load the static files and resources in the browser of that application, looks for file changes and reloads them over time and again. 
they are not real time production server.  
they will host the application resources using a different port number, apart from 80 and HTTP protocol in your system. 
the application hosted by this app dev server, can't be requested from any other machine.
such as: lite-server, http-server, serve etc.
as VS code plugin: Live Server


Node JS: a JS runtime s/w, created by Mr. Ryan Dahl, in 2009. It is a server-side framework.
Node JS is built at the top of V8 JS engine (of the chrome browser. V8 is an open source code mainly written in C++).
Node JS has a rich library with many built-in functions, such as functions to read data from and write data into file, create RESTful Web Server application and many others...
Lots of compiler tools, app dev servers are also built using Node JS.


JavaScript language:

A. Basics:
a. data types
b. operators
c. control flow statements
d. array and basic methods of an array

B. Advanced:
a. callback mechanism and array's advanced methods
b. New Features in JS (ES6+)
	1. let and const keywords
	2. arrow function
	3. rest operator
	4. templated string (string interpolaion)
	5. class and constructor keywords
	6. getters and setters in class
	7. private data members
	8. static members
	9. extends and super (inheritance and override)
	10. object and array destructuring

data types:
string, boolean, number, object and function

keywords: undefined, infinity, null, NaN etc.

declare variables: always using "var" or "let" or "const" keywords
var will not provide scoping of variable inside a function
let will provide scoping of variable inside a function

object in JS: a collection of keys and values

=== => strict equality (checks both the data type and value of both the operands are same or not)
!== => strict in-equality (checks both the data type and value of both the operands are not same or not)
== => equality (checks value of both the operands are same or not)
!= => inequality (checks value of both the operands are not same or not)

JS versions:
JS features are proposed by ECMA (an organization for open standards technologies)
the guideline or proposal for Scripting languages is known as ECMAScript or ES
before 2015, ES5 was the last "old" version
since 2015, ES6 and further versions are known as ES6+ (new) versions

2015 - ES6 => let and const keywords, arrow function, object destructuring, spread and rest operator, promise API, class and constructor and extends and super keywords etc.
2016 - ES7
2017 - ES8
2018 - ES9
2019 - ES10
2020 - ES11
2021 - ES12
2022 - ES13
2023 - ES14
2024 - ES15 (TC239)

Objecs in JS:
a. object literal syntax
b. constructor function
c. class and constructor keyword

JS disadvantages:
a. no data typification
b. no static type checking

transpilation: transformation + compilation
JS code with all latest features (ES15) => vanilla JS (< ES6)
tool: JS transpiler (babel etc.)

TS code with all latest features (ES15) => vanilla JS (< ES6)
tool: TS transpiler => typescript compiler (TSC)

global installation: >npm install/i typescript --location=global
path: C:\Users\<user-name>\AppData\Roaming\npm

local installation (as part if your application): 
>npm i typescript -D or npm i typescript --save-dev

create tsconfig.json file
a. manual
b. using tsc
command: >tsc --init (global tsc)
command: >.\node_modules\.bin\tsc --init (local tsc)

package managers: npm, yarn, bower etc.

application metadata/setting file: package.json
a. manually
b. using npm
	>npm init
	or
	>npm init --yes

install any package:
complete dependency:
>npm install/i <package-name>@<version-number>/latest 
or 
>npm install/i <package-name>@<version-number>/latest --save


development dependency:
>npm install/i <package-name>@<version-number>/latest -D
or
>npm install/i <package-name>@<version-number>/latest --save-dev

all the package's source code will be part of "node_modules" folder and their corresponding executables will be present inside ".bin" sub-folder inside node_modules folder

TypeScript: 
a development level language
before you can execute this code, you need to convert the TS code to JS code.
conversion from TS to JS: transpilation
a. data typification
b. static type checking
c. extra features - generic, interface, extra data types (any, partial, unknown etc.) etc.

strict mode JS:
generates all possible warnings about possible guideline/rule violation or mistakes







