1. Routing
	Client-side routing:

	package: @angular/router
	module: RouterModule
	
	service: Router (router engine), ActivatedRoute, RouterState
   directive: router-outlet, ..

	types: Route, Routes (= Route[])
	Route => path, component

	register the routes array with Router Engine through RouterModule

	path: 'todos/:id/categories/:cid/products/:pid'
	http://localhost:4200/todos/3

	
	{
		id:"3"
	}

	http://localhost:4200/todos/edit?id=3

<button type="button" (click)="call()">{{text}}</button>
class AppComponent{ text='Click Me!!!' call(){...}}

bundle.js
/**/
function AppComponent(){
	this.text = 'Click Me!!!'
	this.call = function(){}
<button type="button" (click)="call()">{{text}}</button>

=> this.button = document.createElement('button',{type:'button' value:this.text})
	this.button.addEventListener('click', this.call)
}

css => bundle.css.js

assets => images

libraries => runtime.js, vendor.js

html => <body> ... <script src="./bundle.js">

2. Form Handling:
package: @angular/forms

template-driven form:
module: FormsModule
directive: ngModel, ngForm, required, email, max, min, range,.....
types: FormComtrol, FormGroup,...

@Directive({
selector:'[required]'
})
class RequiredValidator{
	validate(control:AbstractControl):ValidationErrors|null{
		return Validators.required(control);
	}
}


reactive form handling:
module: ReactiveFormsModule
directives: formComtrol, formGroup, formControlName, formGroupName

class Validators{
	static required(control:AbstractControl):ValidationErrors|null{
		return null | { required:true};
	}
}




